var O=(Y)=>{const U=Y.split("\r\n"),Z=U[0],Q=/^HTTP\/(\d+\.\d+)\s+(\d+)\s+(.*)$/,A=Z.match(Q),K=A?{http:A[1],status:parseInt(A[2],10),message:A[3].trim()}:{};return{...U.slice(1).filter((I)=>I.trim()!=="").reduce((I,V)=>{const G=V.indexOf(":");if(G!==-1){const _=V.slice(0,G).trim().toLowerCase(),X=V.slice(G+1).trim();return{...I,[_]:X}}return I},{}),...K}},v=(Y,U)=>{const Z=U?.skipContent||!1,Q=U?.readBufferSize||512n+256n,A=U?.signal;let K="",j=0n,I=!1;return{[Symbol.asyncIterator](){return{async next(){if(I)return{done:!0,value:void 0};let V=void 0,G,_={},X={recordWarcOffset:0n,recordResponseOffset:0n,recordContentOffset:0n};try{do{A?.throwIfAborted();let F=K,q=[];X.recordWarcOffset=j-BigInt(F.length);while(q.length<2){const N=F.split("\r\n\r\n");if(q=N.length>1?N:q,q.length<2){A?.throwIfAborted();const J=await Y(j,Q);if(!J||J.length===0)return I=!0,{done:!0,value:void 0};F+=typeof J==="string"?J:(new TextDecoder()).decode(J),j+=Q}}G=O(q[0]);const D=G["content-length"]?BigInt(G["content-length"]):0n;if(G["warc-type"]!=="response"||D===0n){const N=D-BigInt(F.length-q[0].length-4);j+=N>0n?N:0n,K=N<0n?F.slice(F.length+Number(N)+4):""}else{while(q.length<3){const E=F.split("\r\n\r\n");if(q=E.length>2?E:q,q.length<3){A?.throwIfAborted();const $=await Y(j,Q);if(!$||$.length===0)return I=!0,{done:!0,value:void 0};F+=typeof $==="string"?$:(new TextDecoder()).decode($),j+=Q}}_=O(q[1]);const N=D-BigInt(q[1].length),J=N-BigInt(F.length-q[0].length-q[1].length-8);V=Z?void 0:(new TextEncoder()).encode(F.slice(q[0].length+q[1].length+8,q[0].length+q[1].length+8+Number(N))+(J>0n?(await Y(j,J)).toString():"")),j+=J>0n?J:0n,K=J<0n?F.slice(F.length+Number(J)+4):"",X.recordResponseOffset=X.recordWarcOffset+BigInt(q[0].length+4),X.recordContentOffset=X.recordResponseOffset+BigInt(q[1].length+4),_["content-length"]=N}}while(G&&G["warc-type"]!=="response");if(!G)return I=!0,{done:!0,value:void 0};return{done:!1,value:[G,_,X,V]}}catch(F){if(A?.aborted)return I=!0,{done:!0,value:void 0};if(F instanceof RangeError)return I=!0,{done:!0,value:void 0};else throw F}}}}}};self.onmessage=async(Y)=>{const{action:U,file:Z}=Y.data;if(U==="parse"&&Z instanceof File)try{self.postMessage({status:"started"});const Q=async(A,K)=>{const j=await Z.slice(Number(A),Number(A+K)).arrayBuffer();return new Uint8Array(j)};try{for await(let A of v(Q,{skipContent:!0})){const[K,j,I]=A,V=j["content-length"]&&!isNaN(Number(j["content-length"]))?BigInt(j["content-length"]):0n,G=BigInt(I.recordContentOffset),_={uri:K["warc-target-uri"]?.replace(/<|>/g,""),status:j.status,ip:K["warc-ip-address"],size:V,date:new Date(K["warc-date"]),location:j.location??j.Location,contentType:j["content-type"],file:Z,offset:G,transferEncoding:j["transfer-encoding"],http:j};self.postMessage({action:"newRecord",message:_})}}catch(A){}self.postMessage({status:"completed"})}catch(Q){self.postMessage({status:"error",error:Q.message})}else self.postMessage({status:"error",error:"Invalid action or file"})};
